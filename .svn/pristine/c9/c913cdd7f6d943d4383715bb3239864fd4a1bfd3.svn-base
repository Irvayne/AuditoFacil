package br.ufpi.estagio.cge.teste.testeUnitario;

import java.io.BufferedReader;

import weka.clusterers.ClusterEvaluation;
import weka.clusterers.SimpleKMeans;
import weka.core.Attribute;
import weka.core.DenseInstance;
import weka.core.FastVector;
import weka.core.Instances;

public class ClusterTest {

    public static void main(String[] args) throws Exception
    {
        double[] one={1,1,1,3};
        double[] two={2,2,2,0};
        double[][] both=new double[2][4];
        both[0]=one;
        both[1]=two;

        Instances instances=ClusterTest.buildArff(both);
    	
    	//BufferedReader datafile = WekaTest.readDataFile("weather.txt");		 
		//Instances instances = new Instances(datafile);
    	
        System.out.println(instances.toString());
        
        SimpleKMeans simpleKMeans = new SimpleKMeans();
        simpleKMeans.buildClusterer(instances);

        ClusterEvaluation eval = new ClusterEvaluation();
        eval.setClusterer(simpleKMeans);
        eval.evaluateClusterer(new Instances(instances));

        System.out.println(eval.clusterResultsToString());
        
    }


public static Instances buildArff(double[][] array) throws Exception
  {
         FastVector      atts = new FastVector();
         atts.addElement(new Attribute("lat")); //latitude
         atts.addElement(new Attribute("lon")); //longitude

         // 2. create Instances object
         Instances test = new Instances("location", atts, 0);

         // 3. fill with data
         for(int s1=0; s1 < array[0].length; s1=s1+1)
         {
             double vals[] = new double[test.numAttributes()];
             vals[0] = array[0][s1];
             vals[1] = array[1][s1];
             test.add(new DenseInstance(1.0, vals));
         }

         return(test);
  }
}
