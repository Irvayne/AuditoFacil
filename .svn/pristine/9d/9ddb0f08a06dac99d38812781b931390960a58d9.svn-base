package br.ufpi.estagio.cge.extrator;

import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;

import br.ufpi.estagio.cge.dao.CargoDAO;
import br.ufpi.estagio.cge.dao.CategoriaDAO;
import br.ufpi.estagio.cge.dao.InformacoesCargoDAO;
import br.ufpi.estagio.cge.dao.InformacoesCategoriaDAO;
import br.ufpi.estagio.cge.dao.InformacoesOrgaoDAO;
import br.ufpi.estagio.cge.dao.MovimentoDAO;
import br.ufpi.estagio.cge.dao.OrgaoDAO;
import br.ufpi.estagio.cge.dao.ServidorDAO;
import br.ufpi.estagio.cge.grafico.Dados;
import br.ufpi.estagio.cge.grafico.GraficoDispersao;
import br.ufpi.estagio.cge.grafico.EstruturaGraficoPizza;
import br.ufpi.estagio.cge.grafico.GraficoCombinacao;
import br.ufpi.estagio.cge.grafico.GraficoLinha;
import br.ufpi.estagio.cge.grafico.GraficoPizza;
import br.ufpi.estagio.cge.modelo.Movimento;
import br.ufpi.estagio.cge.modelo.Servidor;

public class AlgoritmoBusca {

	public static ArrayList<String> listarCargos() throws SQLException {

		return CargoDAO.listar();

	}

	public static ArrayList<String> listarCategorias() throws SQLException {

		return CategoriaDAO.listar();

	}

	public static ArrayList<String> listarOrgaos() throws SQLException {

		return OrgaoDAO.listar();

	}

	public static ArrayList<GraficoDispersao> graficoDispersaoSalarioPorTempo(Dados dados) throws SQLException {
		if (dados.getTipo().equals("cargo"))
			return CargoDAO.graficoDispersaoSalarioPorTempo(dados);
		if (dados.getTipo().equals("categoria"))
			return CategoriaDAO.graficoDispersaoSalarioPorTempo(dados);
		if (dados.getTipo().equals("orgao"))
			return OrgaoDAO.graficoDispersaoSalarioPorTempo(dados);

		return null;

	}

	public static String piramideHierarquica(Dados dados) throws SQLException {

		if (dados.getTipo().equals("orgao")) {
			ArrayList<String> orgaos = OrgaoDAO.listar();
			ArrayList<GraficoLinha> grafico = new ArrayList();
			ArrayList<String> datas = new ArrayList();
			datas.add(dados.getReferencia().concat("04"));
			for (String aux : orgaos) {
				grafico.add(OrgaoDAO.listarMediaSalarial(aux, datas));
			}
			ArrayList<String> ordenado = InformacoesOrgaoDAO.listarOrgaosDecrescente(datas.get(0));

			ArrayList<Integer> qntServidores = new ArrayList();
			for (GraficoLinha aux : grafico) {
				int x = InformacoesOrgaoDAO.buscarQuantidade(aux.getName(), datas.get(0));
				if (x == -1)
					qntServidores.add(10);
				else
					qntServidores.add(x);
			}
			Gson json = new Gson();

			String result = "[{ " + json.toJson("name") + ":" + json.toJson("Quantidade de Servidores") + ", "
					+ json.toJson("data") + ":[[";
			for (int i = 0; i < ordenado.size(); i++) {
				result = result + json.toJson(ordenado.get(i)) + "," + qntServidores.get(i);
				if (i != ordenado.size() - 1) {
					result = result + "],[";
				}
			}
			result = result + "]]}]";

			return result;

		}

		if (dados.getTipo().equals("categoria")) {
			ArrayList<String> categorias = CategoriaDAO.listar();
			ArrayList<GraficoLinha> grafico = new ArrayList();
			ArrayList<String> datas = new ArrayList();
			datas.add(dados.getReferencia().concat("04"));
			for (String aux : categorias) {
				grafico.add(CategoriaDAO.listarMediaSalarial(aux, datas));
			}
			ArrayList<String> ordenado = InformacoesCategoriaDAO.listarCategoriasDecrescente(datas.get(0));

			ArrayList<Integer> qntServidores = new ArrayList();
			for (String aux : categorias) {
				int x = InformacoesCategoriaDAO.buscarQuantidade(aux, datas.get(0));
				if (x == -1)
					qntServidores.add(10);
				else
					qntServidores.add(x);
			}

			Gson json = new Gson();
			String result = "[{ " + json.toJson("name") + ":" + json.toJson("Quantidade de Servidores") + ", "
					+ json.toJson("data") + ":[[";
			for (int i = 0; i < ordenado.size(); i++) {
				result = result + json.toJson(ordenado.get(i)) + "," + qntServidores.get(i);
				if (i != ordenado.size() - 1) {
					result = result + "],[";
				}
			}
			result = result + "]]}]";

			return result;

		}

		return null;

	}

	public static String mediaSalarialQntDeServidores(Dados dados) throws SQLException {

		GraficoCombinacao grafico = new GraficoCombinacao();

		ArrayList<String> datas = gerarDatas(dados.getReferencia());

		ArrayList<GraficoLinha> graf = AlgoritmoBusca.mediaSalarial(dados);

		if (graf.size() > 0 && graf.get(0) != null)
			graf.get(0).setType("column");
		if (graf.size() > 1 && graf.get(1) != null)
			graf.get(1).setType("column");
		if (graf.size() > 2 && graf.get(2) != null)
			graf.get(2).setType("column");

		grafico.setData(graf);

		GraficoLinha media = new GraficoLinha();
		media.setType("spline");
		media.setName("MÃ©dia");

		ArrayList<Double> medias = new ArrayList<>();

		for (int i = 0; i < datas.size(); i++) {
			double aux = 0;
			if (graf.size() > 0 && graf.get(0) != null)
				aux = aux + graf.get(0).getData().get(i);
			if (graf.size() > 1 && graf.get(1) != null)
				aux = aux + graf.get(1).getData().get(i);
			if (graf.size() > 2 && graf.get(2) != null)
				aux = aux + graf.get(2).getData().get(i);

			medias.add(aux / graf.size());
		}
		media.setData(medias);

		graf.add(media);

		double qntC1 = 0;
		double qntC2 = 0;
		double qntC3 = 0;

		if (dados.getTipo().equals("cargo")) {
			for (String aux : datas) {
				if (graf.size() > 0 && graf.get(0) != null)
					qntC1 = qntC1 + InformacoesCargoDAO.buscarQuantidade(graf.get(0).getName(), aux);
			}
			for (String aux : datas) {
				if (graf.size() > 1 && graf.get(1) != null)
					qntC2 = qntC2 + InformacoesCargoDAO.buscarQuantidade(graf.get(1).getName(), aux);
			}
			for (String aux : datas) {
				if (graf.size() > 2 && graf.get(2) != null)
					qntC3 = qntC3 + InformacoesCargoDAO.buscarQuantidade(graf.get(2).getName(), aux);
			}
		}
		if (dados.getTipo().equals("categoria")) {
			for (String aux : datas) {
				if (graf.size() > 0 && graf.get(0) != null)
					qntC1 = qntC1 + InformacoesCategoriaDAO.buscarQuantidade(graf.get(0).getName(), aux);
			}
			for (String aux : datas) {
				if (graf.size() > 1 && graf.get(1) != null)
					qntC2 = qntC2 + InformacoesCategoriaDAO.buscarQuantidade(graf.get(1).getName(), aux);
			}
			for (String aux : datas) {
				if (graf.size() > 2 && graf.get(2) != null)
					qntC3 = qntC3 + InformacoesCategoriaDAO.buscarQuantidade(graf.get(2).getName(), aux);
			}
		}
		if (dados.getTipo().equals("orgao")) {
			for (String aux : datas) {
				if (graf.size() > 0 && graf.get(0) != null)
					qntC1 = qntC1 + InformacoesOrgaoDAO.buscarQuantidade(graf.get(0).getName(), aux);
			}
			for (String aux : datas) {
				if (graf.size() > 1 && graf.get(1) != null)
					qntC2 = qntC2 + InformacoesOrgaoDAO.buscarQuantidade(graf.get(1).getName(), aux);
			}
			for (String aux : datas) {
				if (graf.size() > 2 && graf.get(2) != null)
					qntC3 = qntC3 + InformacoesOrgaoDAO.buscarQuantidade(graf.get(2).getName(), aux);
			}
		}

		EstruturaGraficoPizza pizza = new EstruturaGraficoPizza();
		pizza.setName("Quantidade de Servidores");
		pizza.setType("pie");
		pizza.setShowInLegend(false);
		pizza.setSize(75);
		int[] vet = new int[2];
		vet[0] = 35;
		vet[1] = 10;
		pizza.setCenter(vet);

		ArrayList<GraficoPizza> data = new ArrayList<>();

		if (graf.size() > 0 && graf.get(0) != null) {
			GraficoPizza g1 = new GraficoPizza();
			g1.setName(graf.get(0).getName());
			g1.setY((int) qntC1 / datas.size());
			data.add(g1);
		}
		if (graf.size() > 1 && graf.get(1) != null) {
			GraficoPizza g2 = new GraficoPizza();
			g2.setName(graf.get(1).getName());
			g2.setY((int) qntC2 / datas.size());
			data.add(g2);
		}
		if (graf.size() > 2 && graf.get(2) != null) {
			GraficoPizza g3 = new GraficoPizza();
			g3.setName(graf.get(2).getName());
			g3.setY((int) qntC3 / datas.size());
			data.add(g3);
		}

		pizza.setData(data);

		grafico.setData2(pizza);

		String result = "[";
		Gson gson = new Gson();
		if (graf.size() > 0 && grafico.getData().get(0) != null)
			result = result + gson.toJson(grafico.getData().get(0));
		if (graf.size() > 1 && grafico.getData().get(1) != null)
			result = result + "," + gson.toJson(grafico.getData().get(1));
		if (graf.size() > 2 && grafico.getData().get(2) != null)
			result = result + "," + gson.toJson(grafico.getData().get(2));
		if (graf.size() > 3 && grafico.getData().get(3) != null)
			result = result + "," + gson.toJson(grafico.getData().get(3));
		if (grafico.getData2() != null)
			result = result + "," + gson.toJson(grafico.getData2());

		return result + "]";

	}

	public static ArrayList<GraficoLinha> mediaSalarial(Dados dados) throws SQLException {
		ArrayList<String> input = new ArrayList<>();
		
			input.add(dados.getInput1());
		if (!dados.getInput4().equals(""))
			input.add(dados.getInput4());
		if (!dados.getInput5().equals(""))
			input.add(dados.getInput5());

		ArrayList<GraficoLinha> grafico = new ArrayList<>();

		if (dados.getTipo().equals("cargo")) {
			for (String cargo : input)
				grafico.add(CargoDAO.listarMediaSalarial(cargo, gerarDatas(dados.getReferencia()),
						dados.getTipoSalario(),dados.getInput2()));
		}
		if (dados.getTipo().equals("categoria")) {
			for (String cat : input)
				grafico.add(CategoriaDAO.listarMediaSalarial(cat, gerarDatas(dados.getReferencia())));

		}
		if (dados.getTipo().equals("orgao")) {
			for (String orgao : input)
				grafico.add(OrgaoDAO.listarMediaSalarial(orgao, gerarDatas(dados.getReferencia())));

		}
		return grafico;
	}

	private static ArrayList<String> gerarDatas(String referencia) {
		ArrayList<String> datas = new ArrayList<>();
		if (referencia.equals("2014")) {
			datas.add("201401");
			datas.add("201402");
			datas.add("201403");
			datas.add("201404");
			datas.add("201405");
			datas.add("201406");
			datas.add("201407");
			datas.add("201408");
			datas.add("201409");
			datas.add("201410");
			datas.add("201411");
			datas.add("201412");

		}
		if (referencia.equals("2015")) {
			datas.add("201501");
			datas.add("201502");
			datas.add("201503");
			datas.add("201504");
			datas.add("201505");
			datas.add("201506");
			datas.add("201507");
			datas.add("201508");
			datas.add("201509");
			datas.add("201510");
			datas.add("201511");
			datas.add("201512");

		}
		if (referencia.equals("2016")) {
			datas.add("201601");
			datas.add("201602");
			datas.add("201603");
			datas.add("201604");
		}
		return datas;
	}

	public static String faixaEtaria(Dados faixaEtaria) throws SQLException {
		if (faixaEtaria.getTipo().equals("cargo")) {
			return CargoDAO.faixaEtaria(faixaEtaria.getReferencia(), faixaEtaria.getInput1());
		}
		if (faixaEtaria.getTipo().equals("categoria")) {
			return CategoriaDAO.faixaEtaria(faixaEtaria.getReferencia(), faixaEtaria.getInput1());
		}
		if (faixaEtaria.getTipo().equals("orgao")) {
			return OrgaoDAO.faixaEtaria(faixaEtaria.getReferencia(), faixaEtaria.getInput1());
		}
		return null;
	}

	public static String informacaoServidor(Dados dados) throws SQLException {

		String[] val = dados.getInput1().split("Nome");
		val = val[0].split(":");
		String matricula = val[1];
		matricula = matricula.substring(1);

		Servidor servidor = ServidorDAO.buscar(matricula);
		servidor.setCategoria(CategoriaDAO.buscar(servidor.getCategoria()));

		List<Movimento> movimento = MovimentoDAO.listarMovimento(matricula, dados.getReferencia());
		servidor.setMovimentos(movimento);

		double bruto = 0;
		double liquido = 0;

		for (Movimento aux : movimento) {
			if (aux.getTipo().equals("V")) {
				bruto = bruto + aux.getValor();
				liquido = liquido + aux.getValor();
			} else {
				liquido = liquido - aux.getValor();
			}
		}
		servidor.setSalarioLiquido(liquido);
		servidor.setSalarioBruto(bruto);

		Gson json = new Gson();
		return json.toJson(servidor);
	}

	public static String analiseServidorCargo(Dados dados) throws SQLException{

		String[] val = dados.getInput1().split("Nome");
		val = val[0].split(":");
		String matricula = val[1];
		matricula = matricula.substring(1);

		Servidor servidor = ServidorDAO.buscar(matricula);
		servidor.setGraficoLinha(new ArrayList<GraficoLinha>());

		// salario liquido e liquido do servidor
		List<GraficoLinha> g = (ServidorDAO.listarMediaSalarialPorServidor(servidor.getMatricula(),
				gerarDatas(dados.getReferencia().substring(0, 4))));

		// salario bruto
		servidor.getGraficoLinha().add(g.get(0));
		servidor.getGraficoLinha().get(0).setName("Salário líquido do servidor");
		servidor.getGraficoLinha().get(0).setType("column");


		// salario liquido
		servidor.getGraficoLinha().add(g.get(1));
		servidor.getGraficoLinha().get(1).setName("Salário bruto do servidor");
		servidor.getGraficoLinha().get(1).setType("column");



		// media liquida do cargo no ano
		servidor.getGraficoLinha().add(CargoDAO.listarMediaSalarial(servidor.getCargo_descricao(),
				gerarDatas(dados.getReferencia().substring(0, 4)), "liquido",""));
		servidor.getGraficoLinha().get(2).setName("Média do salário líquido do cargo");
		servidor.getGraficoLinha().get(2).setType("spline");

		// media bruto do cargo no ano
		servidor.getGraficoLinha().add(CargoDAO.listarMediaSalarial(servidor.getCargo_descricao(),
				gerarDatas(dados.getReferencia().substring(0, 4)), "bruto",""));
		servidor.getGraficoLinha().get(3).setName(" Média do salário bruto do cargo");
		servidor.getGraficoLinha().get(3).setType("spline");

		Gson json = new Gson();
		return json.toJson(servidor);
	}
}
