package br.ufpi.estagio.cge.dao;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Calendar;

import com.google.gson.Gson;

import br.ufpi.estagio.cge.dao.conexaoSGBD.Conexao;
import br.ufpi.estagio.cge.grafico.Dados;
import br.ufpi.estagio.cge.grafico.GraficoDispersao;
import br.ufpi.estagio.cge.grafico.GraficoLinha;

public class CategoriaDAO {

	public static ArrayList<String> listar() throws SQLException {

		ArrayList<String> categorias = new ArrayList<String>();

		Statement st = Conexao.getConnection().createStatement();
		String cmd = "SELECT descricao FROM categoria order by descricao";

		ResultSet rs = st.executeQuery(cmd);

		while (rs.next()) {
			if (!rs.getString("descricao").contains("'"))
				categorias.add(rs.getString("descricao"));
		}

		st.close();

		return categorias;
	}

	public static int quantidadeFuncionarios(String data, String categoria) throws SQLException {

		return InformacoesCategoriaDAO.buscarQuantidade(categoria, data);

	}

	public static ArrayList<GraficoDispersao> graficoDispersaoSalarioPorTempo(Dados dados)
			throws SQLException {
		ArrayList<GraficoDispersao> listaDados = new ArrayList<>();
		String codigoCategoria = "";
		if(!dados.getInput2().equals(""))
			codigoCategoria = CategoriaDAO.buscarId(dados.getInput2());
		
			
		Statement st = Conexao.getConnection().createStatement();
		String aux = null;
		if (dados.getTipoSalario().equals("liquido")) {
			aux = "( SELECT pesq1.matricula,pesq1.nome, (v-d) as salario, pesq1.data_admissao from "
					+ " (SELECT s1.data_admissao,s1.nome,m1.matricula,m1.referencia,sum(valor) as v "
					+ " FROM infofolha_cge.servidor s1 inner join infofolha_cge.movimento m1"
					+ " on s1.matricula = m1.matricula and s1.referencia = m1.referencia and s1.referencia" + " like '"
					+ dados.getReferencia() + "' and m1.tipo like 'V' and s1.cargo_descricao like '%" + dados.getInput1()
					+ "%' and categoria like '"+codigoCategoria+"' and orgao_descricao like '%"+dados.getInput3()+"%'"
					+ "group by m1.matricula,m1.tipo" + " ) pesq1" + " inner join"
					+ " (SELECT m1.matricula,m1.referencia,sum(valor) as d"
					+ " FROM infofolha_cge.servidor s1 inner join infofolha_cge.movimento m1"
					+ " on s1.matricula = m1.matricula and s1.referencia = m1.referencia and s1.referencia" + " like '"
					+ dados.getReferencia() + "' and m1.tipo like 'D' and s1.cargo_descricao like '%" + dados.getInput1()
					+ "%' and categoria like '"+codigoCategoria+"' and orgao_descricao like '%"+dados.getInput3()+"%'"
							+ "group by m1.matricula,m1.tipo" + " ) pesq2 on pesq1.matricula=pesq2.matricula)";
		} else {
			aux = "( SELECT pesq1.matricula,pesq1.nome, (v) as salario, pesq1.data_admissao from "
					+ " (SELECT s1.data_admissao,s1.nome,m1.matricula,m1.referencia,sum(valor) as v "
					+ " FROM infofolha_cge.servidor s1 inner join infofolha_cge.movimento m1"
					+ " on s1.matricula = m1.matricula and s1.referencia = m1.referencia and s1.referencia" + " like '"
					+ dados.getReferencia() + "' and m1.tipo like 'V' and s1.cargo_descricao like '%" + dados.getInput1()
					+ "%' and categoria like '"+codigoCategoria+"' and orgao_descricao like '%"+dados.getInput3()+"%'"
					+ "group by m1.matricula,m1.tipo" + " ) pesq1" + " inner join"
					+ " (SELECT m1.matricula,m1.referencia,sum(valor) as d"
					+ " FROM infofolha_cge.servidor s1 inner join infofolha_cge.movimento m1"
					+ " on s1.matricula = m1.matricula and s1.referencia = m1.referencia and s1.referencia" + " like '"
					+ dados.getReferencia() + "' and m1.tipo like 'D' and s1.cargo_descricao like '%" + dados.getInput1()
					+ "%' and categoria like '"+codigoCategoria+"' and orgao_descricao like '%"+dados.getInput3()+"%'"
							+ "group by m1.matricula,m1.tipo" + " ) pesq2 on pesq1.matricula=pesq2.matricula)";

		}
		ResultSet rs = st.executeQuery(aux);

		while (rs.next()) {
			String matricula = rs.getString("matricula");
			double salario = rs.getDouble("salario");
			String dataAdmissao = rs.getString("data_admissao");
			String nome = rs.getString("nome");

			String mesAdmissao = dataAdmissao.substring(5, 6);
			String anoAdmissao = dataAdmissao.substring(0, 4);

			String anoReferencia = dados.getReferencia().substring(0, 4);
			String mesReferencia = dados.getReferencia().substring(5);

			double qtdMes = (Integer.parseInt(anoReferencia) - Integer.parseInt(anoAdmissao)) * 12;
			qtdMes += (Integer.parseInt(mesReferencia) - Integer.parseInt(mesAdmissao));
			ArrayList<Double> dispersao = new ArrayList<>();
			dispersao.add(qtdMes);
			dispersao.add(salario);

			ArrayList<ArrayList<Double>> lista = new ArrayList<>();
			lista.add(dispersao);

			GraficoDispersao obj = new GraficoDispersao();
			obj.setName("MatrÃ­cula: " + matricula + " Nome: " + nome);
			obj.setData(lista);

			listaDados.add(obj);

		}

		return listaDados;

	}

	public static String faixaEtaria(String ano, String categoria) throws SQLException {

		Statement st = Conexao.getConnection().createStatement();

		String a = "SELECT id FROM categoria where descricao like '" + categoria + "'";

		ResultSet rs = st.executeQuery(a);
		String cat = "";
		if (rs.next()) {
			cat = rs.getString("id");
		}

		int[] contadores = new int[20];
		st = Conexao.getConnection().createStatement();
		String aux = "SELECT distinct (cpf), data_nascimento FROM servidor where referencia like '" + ano
				+ "%' and categoria like '" + cat + "'";
		rs = st.executeQuery(aux);

		while (rs.next()) {
			String dataNasc = rs.getString("data_nascimento");
			Calendar calendario = Calendar.getInstance();
			int anoAtual = calendario.get(Calendar.YEAR);
			int mesAtual = calendario.get(Calendar.MONTH);

			if (dataNasc.length() >= 8) {
				String mesnasc = dataNasc.substring(5, 6);
				String anoNasc = dataNasc.substring(0, 4);

				int idade = anoAtual - Integer.parseInt(anoNasc);
				int mes = mesAtual - Integer.parseInt(mesnasc);
				if (mes == 0) {
					idade += 1;
				}
				if (idade >= 0 && idade <= 5) {
					contadores[0]++;
				} else if (idade >= 6 && idade <= 10) {
					contadores[1]++;
				} else if (idade >= 11 && idade <= 15) {
					contadores[2]++;
				} else if (idade >= 16 && idade <= 20) {
					contadores[3]++;
				} else if (idade >= 21 && idade <= 25) {
					contadores[4]++;
				} else if (idade >= 26 && idade <= 30) {
					contadores[5]++;
				} else if (idade >= 31 && idade <= 35) {
					contadores[6]++;
				} else if (idade >= 36 && idade <= 40) {
					contadores[7]++;
				} else if (idade >= 41 && idade <= 45) {
					contadores[8]++;
				} else if (idade >= 46 && idade <= 50) {
					contadores[9]++;
				} else if (idade >= 51 && idade <= 55) {
					contadores[10]++;
				} else if (idade >= 56 && idade <= 60) {
					contadores[11]++;
				} else if (idade >= 61 && idade <= 65) {
					contadores[12]++;
				} else if (idade >= 66 && idade <= 70) {
					contadores[13]++;
				} else if (idade >= 71 && idade <= 75) {
					contadores[14]++;
				} else if (idade >= 76 && idade <= 80) {
					contadores[15]++;
				} else if (idade >= 81 && idade <= 85) {
					contadores[16]++;
				} else if (idade >= 86 && idade <= 90) {
					contadores[17]++;
				} else if (idade >= 91 && idade <= 95) {
					contadores[18]++;
				} else if (idade >= 96 && idade <= 100) {
					contadores[19]++;
				}
			}
		}

		Gson json = new Gson();
		json.toJson(contadores);
		return "[{" + json.toJson("name") + ": " + json.toJson(categoria) + "," + json.toJson("data") + ": "
				+ json.toJson(contadores) + "}]";

	}
	
	public static GraficoLinha listarMediaSalarial(String cat, ArrayList<String> datas)
			throws SQLException {
		GraficoLinha grafico = new GraficoLinha();
		grafico.setName(cat);
		grafico.setData(new ArrayList<Double>());

		Statement st = Conexao.getConnection().createStatement();

		String aux = "SELECT id FROM categoria where descricao like '" + cat + "'";

		ResultSet rs = st.executeQuery(aux);
		String codigo = "";
		if (rs.next()) {
			codigo = rs.getString("id");
		}

		for (String data : datas) {

			double media = InformacoesCategoriaDAO.buscarMedia(cat, data);
			if (media == -1) {

				/*
				 * No primeiro select, ele soma o salario de todos os
				 * funcionario do mes e do cargo especificado que sejam do tipo
				 * V, ou seja, o salario eh um vencimento. No segundo select,
				 * ele soma para o tipo de salario D. Depois ele subtrai esses
				 * dois resultados. Logo apos isso, ele calcula a quantidade de
				 * funcinarios e divide o resultado da subtracao do primeiro
				 * select com o segundo select por essa qunatidade e entao e
				 * encontrado a media.
				 */
				String cmd = "SELECT (v-d) as soma, qnt as quantidade from "
						+ "((SELECT sum(m1.valor) as v FROM servidor s1"
						+ " inner join movimento m1 on s1.matricula = m1.matricula "
						+ "and s1.referencia = m1.referencia and s1.referencia like '" + data + "'"
						+ " and m1.tipo like 'V' and s1.categoria like '" + codigo + "'"
						+ " group by s1.referencia order by s1.referencia) pesq1,"
						+ " (SELECT sum(m1.valor) as d FROM servidor s1"
						+ " inner join movimento m1 on s1.matricula = m1.matricula "
						+ "and s1.referencia = m1.referencia and s1.referencia like '" + data + "' "
						+ "and m1.tipo like 'D' and s1.categoria like '" + codigo + "'"
						+ " group by s1.referencia order by s1.referencia)  pesq2,"
						+ " (SELECT count(*) as qnt FROM servidor" + " where referencia like '" + data
						+ "' and categoria like '" + codigo + "')  pesq3 )";

				rs = st.executeQuery(cmd);

				if (rs.next()) {
					double soma = rs.getDouble("soma");
					int quantidade = rs.getInt("quantidade");

					media = soma / quantidade;

					grafico.getData().add(media);

					InformacoesCategoriaDAO.inserir(cat, data, soma, quantidade);
				}

			} else {
				grafico.getData().add(media);
			}
		}
		st.close();

		return grafico;
	}

	public static String buscarId(String cat) throws SQLException {
		Statement st = Conexao.getConnection().createStatement();
		String aux = "SELECT id FROM categoria where descricao like '" + cat + "'";

		ResultSet rs = st.executeQuery(aux);
		String codigo = "";
		if (rs.next()) {
			codigo = rs.getString("id");
		}

		if(codigo.equals("")){
			codigo = "-1";
		}
		return codigo;
	}
	
	public static String buscar(String id) throws SQLException {
		Statement st = Conexao.getConnection().createStatement();
		String aux = "SELECT descricao FROM categoria where id like '" + id + "'";

		ResultSet rs = st.executeQuery(aux);
		String codigo = "";
		if (rs.next()) {
			codigo = rs.getString("descricao");
		}

		return codigo;
	}


}
